package com.suning.arttrain.web.controller;import com.alibaba.fastjson.JSONObject;import com.suning.arttrain.common.util.AjaxResult;import com.suning.arttrain.common.util.Page;import com.suning.arttrain.common.util.PageData;import com.suning.arttrain.exception.ParamValidateException;import com.suning.arttrain.param.CourseCreateParam;import com.suning.arttrain.param.CourseListParam;import com.suning.arttrain.persistent.CourseInfo;import com.suning.arttrain.service.CourseMsgService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.ModelAndView;import java.util.List;@RestController@RequestMapping("course")public class CourseMsgController extends BaseController {    private final static Logger logger = LoggerFactory.getLogger(CourseMsgController.class);    @Autowired    private CourseMsgService courseMsgService;    /**     * 显示课程管理页面     *     * @return     */    @RequestMapping("/showCourseInfos")    public ModelAndView index() {        ModelAndView mav = new ModelAndView("courseMsg/courseInfos");        return mav;    }    @SuppressWarnings("unchecked")    @RequestMapping(value = "listCourseInfos")    public PageData<CourseInfo> listCourseInfos(@RequestParam("rows") int rows, @RequestParam("page") int page,                                                @RequestParam(value = "courseListParam", required = false) String courseListParam) {        PageData<CourseInfo> data = null;        try {            CourseListParam listParam = JSONObject.parseObject(courseListParam, CourseListParam.class);            listParam.setPageIndex(page);            listParam.setPageSize(rows);            List<CourseInfo> courseInfos = courseMsgService.listCourseInfos(listParam);            int countCourse = courseMsgService.countCourseInfos(listParam);            data = new PageData<>();            data.setTotal(countCourse);            data.setRows(courseInfos);        } catch (Exception e) {            logger.error(e.getMessage(), e);        }        return data;    }    @RequestMapping("queryCourseInfos")    public PageData queryCourseInfos() {        PageData data = new PageData();        try {            List<CourseInfo> courseInfos = courseMsgService.queryCourseInfos();            if (null == courseInfos) {                return data;            }            data.setRows(courseInfos);            data.setTotal(courseInfos.size());            return data;        } catch (Exception e) {            logger.error(e.getMessage(), e);        }        return data;    }    @RequestMapping(value = "/saveCourseInfo", method = RequestMethod.POST)    @ResponseBody    public AjaxResult saveCourseInfo(@RequestParam("paramJson") String paramJson) {        try {            CourseCreateParam courseParam = JSONObject.parseObject(paramJson, CourseCreateParam.class);            courseMsgService.saveCourseInfo(courseParam);            return AjaxResult.success(null, "恭喜，操作成功");        } catch (ParamValidateException e) {            logger.error(e.getMessage(), e);            return AjaxResult.failed(e.getMessage());        } catch (Exception e) {            logger.error(e.getMessage(), e);            return AjaxResult.failed("操作失败，请稍后重试");        } catch (Throwable e) {            logger.error(e.getMessage(), e);            return AjaxResult.failed("操作失败，请稍后重试");        }    }    @RequestMapping(value = "/loadCourseInfo", method = RequestMethod.POST)    public AjaxResult loadCourseInfo(@RequestParam("id") long id) {        try {            CourseInfo courseInfo = courseMsgService.loadCourseInfoById(id);            return AjaxResult.success(courseInfo);        } catch (ParamValidateException e) {            logger.error(e.getMessage(), e);            return AjaxResult.failed(e.getMessage());        } catch (Throwable e) {            logger.error(e.getMessage(), e);            return AjaxResult.failed(e.getMessage());        }    }    @RequestMapping(value = "/deleteCourse", method = RequestMethod.POST)    public AjaxResult deleteCourse(@RequestParam("id") long id) {        try {            courseMsgService.deleteCourseInfo(id);            return AjaxResult.success(null, "恭喜，操作成功");        } catch (ParamValidateException e) {            logger.error(e.getMessage(), e);            return AjaxResult.failed(e.getMessage());        } catch (Throwable e) {            logger.error(e.getMessage(), e);            return AjaxResult.failed(e.getMessage());        }    }}